Initializing AMReX (23.11-7-gfa3743fd1fdd-dirty)...
MPI initialized with 4 MPI processes
MPI initialized with thread support level 0
AMReX (23.11-7-gfa3743fd1fdd-dirty) initialized
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
amrex::Copy start
amrex::Copy end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLMG: # of AMR levels: 1
      # of MG levels on the coarsest AMR level: 6
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLMG: Initial rhs               = 15.20237123
MLMG: Initial residual (resid0) = 15.20237123
AT LEVEL 0 0   DN: Norm before smooth 15.20237123
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   DN: Norm after  smooth 8.974903011
AT LEVEL 0 1   DN: Norm before smooth 5.456241718
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   DN: Norm after  smooth 3.222105383
AT LEVEL 0 2   DN: Norm before smooth 2.495086203
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   DN: Norm after  smooth 1.184467988
AT LEVEL 0 3   DN: Norm before smooth 0.6847901687
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   DN: Norm after  smooth 0.2255916472
AT LEVEL 0 4   DN: Norm before smooth 0.1598471639
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   DN: Norm after  smooth 0.03990560821
AT LEVEL 0 5   DN: Norm before bottom 0.02226176752
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver::solve_bicgstab start
MLCGSolver_BiCGStab: make ph and sh
MLCGSolver_BiCGStab: ph.setVal(0) and sh.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: make sorig,p,r,s,rh,v,t
MLCGSolver_BiCGStab: Lp.correctionResidual(r,sol,rhs)
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
MLCGSolver_BiCGStab: Lp.normalize(r)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
MLCGSolver_BiCGStab: LocalCopy sorig from sol
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: LocalCopy rh from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: sol.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: rnorm = norm_inf(r)
solve_bicgstab: start iter = 1
Calculate rho
amrex::Copy start
amrex::Copy end
Local copy p from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 1
solve_bicgstab: start iter = 2
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 2
solve_bicgstab: start iter = 3
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 3
solve_bicgstab: start iter = 4
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 4
solve_bicgstab: start iter = 5
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 5
solve_bicgstab: start iter = 6
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
MLCGSolver::solve_bicgstab end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 5   UP: Norm after  bottom 1.354727887e-06
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm before smooth 0.07361411169
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm after  smooth 0.002866184108
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm before smooth 0.6576397184
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm after  smooth 0.01592928826
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm before smooth 2.03847853
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm after  smooth 0.1126604933
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm before smooth 12.556316
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm after  smooth 0.2130062459
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm before smooth 24.94599778
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm after  smooth 0.8390014061
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLMG: Iteration   1 Fine resid/bnorm = 0.05518885136
AT LEVEL 0 0   DN: Norm before smooth 0.8390014061
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   DN: Norm after  smooth 0.2410735263
AT LEVEL 0 1   DN: Norm before smooth 0.1541428244
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   DN: Norm after  smooth 0.1172204957
AT LEVEL 0 2   DN: Norm before smooth 0.08792931257
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   DN: Norm after  smooth 0.04462372628
AT LEVEL 0 3   DN: Norm before smooth 0.02885622899
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   DN: Norm after  smooth 0.01164983231
AT LEVEL 0 4   DN: Norm before smooth 0.006783136996
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   DN: Norm after  smooth 0.002556874644
AT LEVEL 0 5   DN: Norm before bottom 0.001216159312
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver::solve_bicgstab start
MLCGSolver_BiCGStab: make ph and sh
MLCGSolver_BiCGStab: ph.setVal(0) and sh.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: make sorig,p,r,s,rh,v,t
MLCGSolver_BiCGStab: Lp.correctionResidual(r,sol,rhs)
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
MLCGSolver_BiCGStab: Lp.normalize(r)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
MLCGSolver_BiCGStab: LocalCopy sorig from sol
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: LocalCopy rh from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: sol.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: rnorm = norm_inf(r)
solve_bicgstab: start iter = 1
Calculate rho
amrex::Copy start
amrex::Copy end
Local copy p from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 1
solve_bicgstab: start iter = 2
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 2
solve_bicgstab: start iter = 3
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 3
solve_bicgstab: start iter = 4
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 4
solve_bicgstab: start iter = 5
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 5
solve_bicgstab: start iter = 6
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
MLCGSolver::solve_bicgstab end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 5   UP: Norm after  bottom 4.152045801e-08
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm before smooth 0.005134888486
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm after  smooth 0.0001937170785
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm before smooth 0.03775673878
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm after  smooth 0.0009297409982
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm before smooth 0.1001872493
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm after  smooth 0.00489408402
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm before smooth 0.5638518735
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm after  smooth 0.008409900803
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm before smooth 1.237837875
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm after  smooth 0.0421407137
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLMG: Iteration   2 Fine resid/bnorm = 0.00277198294
AT LEVEL 0 0   DN: Norm before smooth 0.0421407137
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   DN: Norm after  smooth 0.01392676807
AT LEVEL 0 1   DN: Norm before smooth 0.007748993383
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   DN: Norm after  smooth 0.005513566777
AT LEVEL 0 2   DN: Norm before smooth 0.003970620532
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   DN: Norm after  smooth 0.002090223937
AT LEVEL 0 3   DN: Norm before smooth 0.001279354517
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   DN: Norm after  smooth 0.0005807032898
AT LEVEL 0 4   DN: Norm before smooth 0.0003445168536
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   DN: Norm after  smooth 0.0001592930252
AT LEVEL 0 5   DN: Norm before bottom 7.445927042e-05
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver::solve_bicgstab start
MLCGSolver_BiCGStab: make ph and sh
MLCGSolver_BiCGStab: ph.setVal(0) and sh.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: make sorig,p,r,s,rh,v,t
MLCGSolver_BiCGStab: Lp.correctionResidual(r,sol,rhs)
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
MLCGSolver_BiCGStab: Lp.normalize(r)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
MLCGSolver_BiCGStab: LocalCopy sorig from sol
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: LocalCopy rh from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: sol.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: rnorm = norm_inf(r)
solve_bicgstab: start iter = 1
Calculate rho
amrex::Copy start
amrex::Copy end
Local copy p from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 1
solve_bicgstab: start iter = 2
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 2
solve_bicgstab: start iter = 3
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 3
solve_bicgstab: start iter = 4
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 4
solve_bicgstab: start iter = 5
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 5
solve_bicgstab: start iter = 6
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
MLCGSolver::solve_bicgstab end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 5   UP: Norm after  bottom 2.389504853e-09
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm before smooth 0.0003340592034
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm after  smooth 1.218211749e-05
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm before smooth 0.002080872537
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm after  smooth 5.248923505e-05
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm before smooth 0.005531129082
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm after  smooth 0.000231659774
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm before smooth 0.0269006576
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm after  smooth 0.0004339108293
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm before smooth 0.06898401207
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm after  smooth 0.001978387034
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLMG: Iteration   3 Fine resid/bnorm = 0.0001301367401
AT LEVEL 0 0   DN: Norm before smooth 0.001978387034
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   DN: Norm after  smooth 0.001057338928
AT LEVEL 0 1   DN: Norm before smooth 0.0005778460121
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   DN: Norm after  smooth 0.0003432855728
AT LEVEL 0 2   DN: Norm before smooth 0.0001987455154
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   DN: Norm after  smooth 0.0001238417427
AT LEVEL 0 3   DN: Norm before smooth 6.786844535e-05
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   DN: Norm after  smooth 2.990267832e-05
AT LEVEL 0 4   DN: Norm before smooth 1.900225005e-05
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   DN: Norm after  smooth 9.621811155e-06
AT LEVEL 0 5   DN: Norm before bottom 4.518522751e-06
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver::solve_bicgstab start
MLCGSolver_BiCGStab: make ph and sh
MLCGSolver_BiCGStab: ph.setVal(0) and sh.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: make sorig,p,r,s,rh,v,t
MLCGSolver_BiCGStab: Lp.correctionResidual(r,sol,rhs)
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
MLCGSolver_BiCGStab: Lp.normalize(r)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
MLCGSolver_BiCGStab: LocalCopy sorig from sol
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: LocalCopy rh from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: sol.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: rnorm = norm_inf(r)
solve_bicgstab: start iter = 1
Calculate rho
amrex::Copy start
amrex::Copy end
Local copy p from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 1
solve_bicgstab: start iter = 2
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 2
solve_bicgstab: start iter = 3
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 3
solve_bicgstab: start iter = 4
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 4
solve_bicgstab: start iter = 5
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
MLCGSolver::solve_bicgstab end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 5   UP: Norm after  bottom 8.186252619e-10
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm before smooth 2.073405515e-05
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm after  smooth 7.372324286e-07
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm before smooth 0.0001142577756
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm after  smooth 2.930901869e-06
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm before smooth 0.0003193810408
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm after  smooth 1.155094158e-05
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm before smooth 0.001324268221
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm after  smooth 2.859785995e-05
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm before smooth 0.004866466915
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm after  smooth 0.0001228763515
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLMG: Iteration   4 Fine resid/bnorm = 8.082709579e-06
AT LEVEL 0 0   DN: Norm before smooth 0.0001228763516
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   DN: Norm after  smooth 7.581371266e-05
AT LEVEL 0 1   DN: Norm before smooth 4.135133895e-05
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   DN: Norm after  smooth 2.339758525e-05
AT LEVEL 0 2   DN: Norm before smooth 1.252958189e-05
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   DN: Norm after  smooth 7.736006475e-06
AT LEVEL 0 3   DN: Norm before smooth 4.275942887e-06
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   DN: Norm after  smooth 1.827542704e-06
AT LEVEL 0 4   DN: Norm before smooth 1.105818223e-06
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   DN: Norm after  smooth 5.764152402e-07
AT LEVEL 0 5   DN: Norm before bottom 2.737355366e-07
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver::solve_bicgstab start
MLCGSolver_BiCGStab: make ph and sh
MLCGSolver_BiCGStab: ph.setVal(0) and sh.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: make sorig,p,r,s,rh,v,t
MLCGSolver_BiCGStab: Lp.correctionResidual(r,sol,rhs)
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
MLCGSolver_BiCGStab: Lp.normalize(r)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
MLCGSolver_BiCGStab: LocalCopy sorig from sol
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: LocalCopy rh from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: sol.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: rnorm = norm_inf(r)
solve_bicgstab: start iter = 1
Calculate rho
amrex::Copy start
amrex::Copy end
Local copy p from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 1
solve_bicgstab: start iter = 2
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 2
solve_bicgstab: start iter = 3
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 3
solve_bicgstab: start iter = 4
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 4
solve_bicgstab: start iter = 5
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
MLCGSolver::solve_bicgstab end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 5   UP: Norm after  bottom 5.578809068e-11
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm before smooth 1.272394001e-06
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm after  smooth 4.439914191e-08
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm before smooth 6.392482759e-06
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm after  smooth 1.658449738e-07
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm before smooth 1.911082879e-05
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm after  smooth 5.998133785e-07
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm before smooth 8.216666011e-05
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm after  smooth 1.884485983e-06
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm before smooth 0.0003361715653
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm after  smooth 8.607298304e-06
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLMG: Iteration   5 Fine resid/bnorm = 5.661813004e-07
AT LEVEL 0 0   DN: Norm before smooth 8.607298312e-06
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   DN: Norm after  smooth 5.269765642e-06
AT LEVEL 0 1   DN: Norm before smooth 2.870034236e-06
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   DN: Norm after  smooth 1.607042369e-06
AT LEVEL 0 2   DN: Norm before smooth 8.488753242e-07
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   DN: Norm after  smooth 5.130989057e-07
AT LEVEL 0 3   DN: Norm before smooth 2.847442488e-07
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   DN: Norm after  smooth 1.143947008e-07
AT LEVEL 0 4   DN: Norm before smooth 6.674643158e-08
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   DN: Norm after  smooth 3.486697775e-08
AT LEVEL 0 5   DN: Norm before bottom 1.672301291e-08
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver::solve_bicgstab start
MLCGSolver_BiCGStab: make ph and sh
MLCGSolver_BiCGStab: ph.setVal(0) and sh.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: make sorig,p,r,s,rh,v,t
MLCGSolver_BiCGStab: Lp.correctionResidual(r,sol,rhs)
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
MLCGSolver_BiCGStab: Lp.normalize(r)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
MLCGSolver_BiCGStab: LocalCopy sorig from sol
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: LocalCopy rh from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: sol.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: rnorm = norm_inf(r)
solve_bicgstab: start iter = 1
Calculate rho
amrex::Copy start
amrex::Copy end
Local copy p from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 1
solve_bicgstab: start iter = 2
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 2
solve_bicgstab: start iter = 3
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 3
solve_bicgstab: start iter = 4
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 4
solve_bicgstab: start iter = 5
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
MLCGSolver::solve_bicgstab end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 5   UP: Norm after  bottom 3.663434116e-12
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm before smooth 7.824239433e-08
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm after  smooth 2.696094179e-09
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm before smooth 3.676152077e-07
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm after  smooth 9.580560659e-09
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm before smooth 1.242686514e-06
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm after  smooth 3.228858155e-08
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm before smooth 5.55507197e-06
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm after  smooth 1.241580531e-07
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm before smooth 2.286382859e-05
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm after  smooth 5.897429905e-07
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLMG: Iteration   6 Fine resid/bnorm = 3.879282785e-08
AT LEVEL 0 0   DN: Norm before smooth 5.8974297e-07
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   DN: Norm after  smooth 3.593896685e-07
AT LEVEL 0 1   DN: Norm before smooth 1.955220675e-07
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   DN: Norm after  smooth 1.093885083e-07
AT LEVEL 0 2   DN: Norm before smooth 5.781102951e-08
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   DN: Norm after  smooth 3.434857435e-08
AT LEVEL 0 3   DN: Norm before smooth 1.903002406e-08
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   DN: Norm after  smooth 7.286369818e-09
AT LEVEL 0 4   DN: Norm before smooth 4.132528155e-09
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   DN: Norm after  smooth 2.152839877e-09
AT LEVEL 0 5   DN: Norm before bottom 1.03371193e-09
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver::solve_bicgstab start
MLCGSolver_BiCGStab: make ph and sh
MLCGSolver_BiCGStab: ph.setVal(0) and sh.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: make sorig,p,r,s,rh,v,t
MLCGSolver_BiCGStab: Lp.correctionResidual(r,sol,rhs)
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
MLCGSolver_BiCGStab: Lp.normalize(r)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
MLCGSolver_BiCGStab: LocalCopy sorig from sol
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: LocalCopy rh from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: sol.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: rnorm = norm_inf(r)
solve_bicgstab: start iter = 1
Calculate rho
amrex::Copy start
amrex::Copy end
Local copy p from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 1
solve_bicgstab: start iter = 2
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 2
solve_bicgstab: start iter = 3
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 3
solve_bicgstab: start iter = 4
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 4
solve_bicgstab: start iter = 5
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
MLCGSolver::solve_bicgstab end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 5   UP: Norm after  bottom 2.3550436e-13
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm before smooth 4.846863448e-09
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm after  smooth 1.658036881e-10
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm before smooth 2.176686848e-08
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm after  smooth 5.656013721e-10
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm before smooth 8.238900311e-08
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm after  smooth 2.123335169e-09
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm before smooth 3.724069327e-07
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm after  smooth 8.17997534e-09
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm before smooth 1.538188842e-06
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm after  smooth 3.984742489e-08
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLMG: Iteration   7 Fine resid/bnorm = 2.62113256e-09
AT LEVEL 0 0   DN: Norm before smooth 3.984743022e-08
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   DN: Norm after  smooth 2.421270929e-08
AT LEVEL 0 1   DN: Norm before smooth 1.316275903e-08
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   DN: Norm after  smooth 7.35859155e-09
AT LEVEL 0 2   DN: Norm before smooth 3.88965997e-09
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   DN: Norm after  smooth 2.294862258e-09
AT LEVEL 0 3   DN: Norm before smooth 1.270530164e-09
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   DN: Norm after  smooth 4.700756029e-10
AT LEVEL 0 4   DN: Norm before smooth 2.604615153e-10
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   DN: Norm after  smooth 1.349059968e-10
AT LEVEL 0 5   DN: Norm before bottom 6.463521896e-11
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver::solve_bicgstab start
MLCGSolver_BiCGStab: make ph and sh
MLCGSolver_BiCGStab: ph.setVal(0) and sh.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: make sorig,p,r,s,rh,v,t
MLCGSolver_BiCGStab: Lp.correctionResidual(r,sol,rhs)
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
MLCGSolver_BiCGStab: Lp.normalize(r)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
MLCGSolver_BiCGStab: LocalCopy sorig from sol
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: LocalCopy rh from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: sol.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: rnorm = norm_inf(r)
solve_bicgstab: start iter = 1
Calculate rho
amrex::Copy start
amrex::Copy end
Local copy p from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 1
solve_bicgstab: start iter = 2
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 2
solve_bicgstab: start iter = 3
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 3
solve_bicgstab: start iter = 4
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 4
solve_bicgstab: start iter = 5
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
MLCGSolver::solve_bicgstab end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 5   UP: Norm after  bottom 1.501433942e-14
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm before smooth 3.027592492e-10
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm after  smooth 1.032674869e-11
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm before smooth 1.323915512e-09
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm after  smooth 3.404961082e-11
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm before smooth 5.44218705e-09
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm after  smooth 1.421409061e-10
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm before smooth 2.480807552e-08
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm after  smooth 5.390192994e-10
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm before smooth 1.027270793e-07
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm after  smooth 2.668341904e-09
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLMG: Iteration   8 Fine resid/bnorm = 1.755209644e-10
AT LEVEL 0 0   DN: Norm before smooth 2.668334859e-09
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   DN: Norm after  smooth 1.618408602e-09
AT LEVEL 0 1   DN: Norm before smooth 8.793594389e-10
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   DN: Norm after  smooth 4.912808772e-10
AT LEVEL 0 2   DN: Norm before smooth 2.596933186e-10
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   DN: Norm after  smooth 1.530952622e-10
AT LEVEL 0 3   DN: Norm before smooth 8.475668285e-11
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   DN: Norm after  smooth 3.061006084e-11
AT LEVEL 0 4   DN: Norm before smooth 1.674467733e-11
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   DN: Norm after  smooth 8.560902492e-12
AT LEVEL 0 5   DN: Norm before bottom 4.080865895e-12
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver::solve_bicgstab start
MLCGSolver_BiCGStab: make ph and sh
MLCGSolver_BiCGStab: ph.setVal(0) and sh.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: make sorig,p,r,s,rh,v,t
MLCGSolver_BiCGStab: Lp.correctionResidual(r,sol,rhs)
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
MLCGSolver_BiCGStab: Lp.normalize(r)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
MLCGSolver_BiCGStab: LocalCopy sorig from sol
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: LocalCopy rh from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: sol.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: rnorm = norm_inf(r)
solve_bicgstab: start iter = 1
Calculate rho
amrex::Copy start
amrex::Copy end
Local copy p from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 1
solve_bicgstab: start iter = 2
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 2
solve_bicgstab: start iter = 3
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 3
solve_bicgstab: start iter = 4
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 4
solve_bicgstab: start iter = 5
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
MLCGSolver::solve_bicgstab end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 5   UP: Norm after  bottom 9.561953323e-16
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm before smooth 1.905221275e-11
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm after  smooth 6.502072993e-13
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm before smooth 8.235986935e-11
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm after  smooth 2.099884939e-12
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm before smooth 3.588225142e-10
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm after  smooth 9.494692869e-12
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm before smooth 1.646022204e-09
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm after  smooth 3.553060992e-11
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm before smooth 6.827759833e-09
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm after  smooth 1.776557636e-10
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLMG: Iteration   9 Fine resid/bnorm = 1.168470428e-11
AT LEVEL 0 0   DN: Norm before smooth 1.776352121e-10
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   DN: Norm after  smooth 1.076285308e-10
AT LEVEL 0 1   DN: Norm before smooth 5.845739077e-11
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   DN: Norm after  smooth 3.264141777e-11
AT LEVEL 0 2   DN: Norm before smooth 1.725386816e-11
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   DN: Norm after  smooth 1.020326608e-11
AT LEVEL 0 3   DN: Norm before smooth 5.65052843e-12
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   DN: Norm after  smooth 2.00647418e-12
AT LEVEL 0 4   DN: Norm before smooth 1.104175853e-12
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   DN: Norm after  smooth 5.486151527e-13
AT LEVEL 0 5   DN: Norm before bottom 2.59569558e-13
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver::solve_bicgstab start
MLCGSolver_BiCGStab: make ph and sh
MLCGSolver_BiCGStab: ph.setVal(0) and sh.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: make sorig,p,r,s,rh,v,t
MLCGSolver_BiCGStab: Lp.correctionResidual(r,sol,rhs)
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
MLCGSolver_BiCGStab: Lp.normalize(r)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
MLCGSolver_BiCGStab: LocalCopy sorig from sol
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: LocalCopy rh from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
MLCGSolver_BiCGStab: sol.setVal(0)
FabArray<FAB>::setVal(val,comp,ncomp,nghost) start
FabArray<FAB>::setVal(val,comp,ncomp,nghost) end
MLCGSolver_BiCGStab: rnorm = norm_inf(r)
solve_bicgstab: start iter = 1
Calculate rho
amrex::Copy start
amrex::Copy end
Local copy p from r
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 1
solve_bicgstab: start iter = 2
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 2
solve_bicgstab: start iter = 3
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 3
solve_bicgstab: start iter = 4
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
solve_bicgstab: end iter = 4
solve_bicgstab: start iter = 5
Calculate rho
amrex::Copy start
amrex::Copy end
Calculate p
Local copy ph from p
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(v,ph)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(v)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
Calculate rhTv
amrex::Copy start
amrex::Copy end
Saxpy sol += alpha*ph
Lincomb s = r - alpha*v
rnorm = norm_inf(s)
LocalCopy sh from s
FabArray<FAB>::LocalCopy start
amrex::Copy start
amrex::Copy end
FabArray<FAB>::LocalCopy end
Lp.apply(t,sh)
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
Lp.normalize(t)
MLNodeLaplacian::normalize start
MLNodeLaplacian::normalize end
tvals[2]
amrex::Copy start
amrex::Copy end
amrex::Copy start
amrex::Copy end
Saxpy sol += omega * sh
Saxpy sol += omega * sh
rnorm = norm_inf(r)
MLCGSolver::solve_bicgstab end
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 5   UP: Norm after  bottom 6.09346768e-17
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm before smooth 1.205759242e-12
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 4   UP: Norm after  smooth 4.128500219e-14
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm before smooth 5.214746913e-12
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 3   UP: Norm after  smooth 1.314860352e-13
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm before smooth 2.363818466e-11
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 2   UP: Norm after  smooth 6.334612072e-13
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm before smooth 1.089449629e-10
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 1   UP: Norm after  smooth 2.342985905e-12
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm before smooth 4.524331341e-10
MLNodeLinOp::correctionResidual start
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLNodeLinOp::correctionResidual Xpay
MLNodeLinOp::correctionResidual end
AT LEVEL 0 0   UP: Norm after  smooth 1.178494705e-11
MLNodeLinOp::apply: applyBC
MLNodeLinOp::apply: Fapply
MLNodeLaplacian::Fapply: start
MLNodeLaplacian::Fapply: step 1
MLNodeLaplacian::Fapply: end
MLNodeLinOp::apply end
MLMG: Iteration  10 Fine resid/bnorm = 7.77325191e-13
MLMG: Final Iter. 10 resid, resid/bnorm = 1.181718612e-11, 7.77325191e-13
MLMG: Timers: Solve = 5.496511929 Iter = 4.789224864 Bottom = 0.184693218
amrex::Copy start
amrex::Copy end
Unused ParmParse Variables:
  [TOP]::amr.plot_file(nvals = 1)  :: [EB_Node_3D_plt]
  [TOP]::amr.check_file(nvals = 1)  :: [EB_Node_3D_chk]
  [TOP]::amr.checkpoint_files_output(nvals = 1)  :: [0]

AMReX (23.11-7-gfa3743fd1fdd-dirty) finalized
